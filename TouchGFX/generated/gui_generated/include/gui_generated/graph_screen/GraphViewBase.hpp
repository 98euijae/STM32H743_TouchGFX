/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef GRAPHVIEWBASE_HPP
#define GRAPHVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/graph_screen/GraphPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/Container.hpp>
#include <gui/containers/Graph1.hpp>

class GraphViewBase : public touchgfx::View<GraphPresenter>
{
public:
    GraphViewBase();
    virtual ~GraphViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void sensorAlarmFunc()
    {
        // Override and implement this function in Graph
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box bg;
    touchgfx::Button button1;
    touchgfx::Container graphContainer;
    Graph1 CH4graph;
    Graph1 CH3graph;
    Graph1 CH2graph;
    Graph1 CH1graph;

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 9600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_SENSORALARMFUNC_INTERVAL = 10;
    uint32_t frameCountSensorAlarmFuncInterval;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<GraphViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // GRAPHVIEWBASE_HPP
