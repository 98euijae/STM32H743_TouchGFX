/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    frameCountCircleMoveInterval(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 640, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setPosition(0, 0, 640, 480);
    background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(background);

    blueRhombus.setPosition(273, 200, 80, 80);
    blueRhombus.setOrigin(0.0f, 0.0f);
    blueRhombus.setScale(1.0f, 1.0f);
    blueRhombus.setAngle(0.0f);
    blueRhombusPainter.setColor(touchgfx::Color::getColorFromRGB(0, 47, 255));
    blueRhombus.setPainter(blueRhombusPainter);
    const touchgfx::AbstractShape::ShapePoint<float> blueRhombusPoints[4] = { { 40.0f, 0.0f }, { 80.0f, 40.0f }, { 40.0f, 80.0f }, { 0.0f, 40.0f } };
    blueRhombus.setShape(blueRhombusPoints);
    add(blueRhombus);

    redCircle.setPosition(65, 200, 80, 80);
    redCircle.setCenter(40, 40);
    redCircle.setRadius(40);
    redCircle.setLineWidth(0);
    redCircle.setArc(0, 360);
    redCirclePainter.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    redCircle.setPainter(redCirclePainter);
    add(redCircle);

    circleFlagBtn.setXY(200, 352);
    circleFlagBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
    circleFlagBtn.setLabelText(touchgfx::TypedText(T_CIRCLEBTNMOVE));
    circleFlagBtn.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    circleFlagBtn.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    circleFlagBtn.setAction(buttonCallback);
    add(circleFlagBtn);

    changeBGBtn.setXY(200, 419);
    changeBGBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
    changeBGBtn.setLabelText(touchgfx::TypedText(T_CHANGEBGBTN));
    changeBGBtn.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    changeBGBtn.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    changeBGBtn.setAction(buttonCallback);
    add(changeBGBtn);

    changeScreenBtn.setXY(380, 31);
    changeScreenBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
    changeScreenBtn.setLabelText(touchgfx::TypedText(T_CHANGESCREEN));
    changeScreenBtn.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    changeScreenBtn.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    changeScreenBtn.setAction(buttonCallback);
    add(changeScreenBtn);
}

MainViewBase::~MainViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void MainViewBase::setupScreen()
{

}

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &circleFlagBtn)
    {
        //circleFlagBtnClicked
        //When circleFlagBtn clicked call virtual function
        //Call circleFlagBtnClicked
        circleFlagBtnClicked();
    }
    if (&src == &changeBGBtn)
    {
        //changeBGBtnClicked
        //When changeBGBtn clicked call virtual function
        //Call changeBGBtnClicked
        changeBGBtnClicked();
    }
    if (&src == &changeScreenBtn)
    {
        //changeScreen
        //When changeScreenBtn clicked change screen to Graph
        //Go to Graph with no screen transition
        application().gotoGraphScreenNoTransition();
    }
}

void MainViewBase::handleTickEvent()
{
    frameCountCircleMoveInterval++;
    if(frameCountCircleMoveInterval == TICK_CIRCLEMOVE_INTERVAL)
    {
        //circleMove
        //When every N tick call virtual function
        //Call circleMove
        circleMove();
        frameCountCircleMoveInterval = 0;
    }
}
